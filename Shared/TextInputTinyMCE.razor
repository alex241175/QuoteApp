@using TinyMCE.Blazor
@using Chinese
@inject DatabaseContext DbContext
@inject IJSRuntime jsRuntime

<label for="text" class="col-form-label my-2">內容:</label>
<a class="btn btn-light btn-sm mx-2" @onclick="Beautify">整理</a>
<a class="btn btn-light btn-sm mx-2" @onclick="ConvertTraditional">繁</a>
<a class="btn btn-light btn-sm mx-2" @onclick="OpenQuoteLink">插入語錄</a>

<Editor ApiKey='25i7f58pz09k5qfcxxmaiwnujkeku7kwoi3w61n9dmf9p5l2' Value=@Text @ref=TinyEditor 
Conf="@editorConf" />

<Modal @ref="quoteLinkModal">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>插入語錄</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Autocomplete TItem="Quote"
            TValue="int"
            Data="@quotes"
            TextField="@(( item ) => item.Title)"
            ValueField="@(( item ) => item.QuoteId)"
            @bind-SelectedValue="@quoteId"
            @bind-SelectedText="@title"
            Placeholder="Enter title..."
            Filter="AutocompleteFilter.StartsWith"
            FreeTyping
            CustomFilter="@(( item, searchValue ) => item.Title.IndexOf( searchValue, 0, StringComparison.CurrentCultureIgnoreCase ) >= 0 )">
        </Autocomplete>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Danger" Clicked="()=> InsertQuoteLink()">插入</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
@* <HxModal @ref="quoteLinkModal" Size="ModalSize.Large" Fullscreen="ModalFullscreen.MediumDown" Title="插入語錄">
	    <BodyTemplate>
        <HxAutosuggest Label=""
                    Placeholder="請輸入語錄標題"
                    TItem="Quote"
                    TValue="int"
                    Delay="1000"
                    MinimumLength="1"
                    @bind-Value="@autosuggestValue"
                    DataProvider="ProvideSuggestions"
                    ValueSelector="(Quote q) => q.QuoteId"
                    TextSelector="(Quote q) => q.Title"
                    ItemFromValueResolver="ResolveAutosuggestItemFromValue">
                    <ItemTemplate Context="item">@item.Title <sup>@item.QuoteId</sup></ItemTemplate>
                    <EmptyTemplate>
                        <span class="p-2">找不到語錄標題</span>
                    </EmptyTemplate>
        </HxAutosuggest>
        <HxButton Text="插入" OnClick="InsertQuoteLink" Color="ThemeColor.Primary" /> 
	</BodyTemplate>
</HxModal> *@

@code {

    [Parameter]
    public string Text { get; set;}
    private Editor TinyEditor;
    private Modal quoteLinkModal;
    // private int autosuggestValue { get; set; }
    private IEnumerable<Quote> quotes {get;set;}
    private int quoteId;
    private string title;
    private Dictionary<string, object> editorConf = new Dictionary<string, object>{
        { "menubar", false },
        { "height", 400},
        { "toolbar_sticky",true}, 
        { "plugins", "link code lists table paste" },
        { "toolbar", "undo redo | paste pastetext | styleselect | forecolor | bold italic | numlist bullist | alignleft aligncenter alignright alignjustify | outdent indent | table | link | code" }
    };

     protected override async Task OnInitializedAsync(){
            quotes = DbContext.Quotes.OrderBy(q => q.Title).ToList();
     }

    public string GetContent()
    {
        return TinyEditor.Value;
    }

    private async Task Beautify()
	{
        string text = TinyEditor.Value;
        text = text.Replace(",","，").Replace(";","；").Replace(":","：");  // 標點輔全型
        Text = text;
        StateHasChanged();
	}
       private async Task ConvertTraditional()
	{
        string text = TinyEditor.Value;
        text = ChineseConverter.ToTraditional(text);
        Text = text;
        StateHasChanged();

	}
    private async Task OpenQuoteLink()
	{
		// persist the text entered
        Text = TinyEditor.Value; 
        //store current cursor location because when you click outside editor, lose focus
        await jsRuntime.InvokeVoidAsync("storeBookmark"); 
        quoteLinkModal.Show();
	}
    private void CloseQuoteLink()
	{
		quoteLinkModal.Hide();
	}
    @* private async Task<AutosuggestDataProviderResult<Quote>> ProvideSuggestions(AutosuggestDataProviderRequest request)
	{
		await Task.Delay(400); // backend API speed simulation
		return new AutosuggestDataProviderResult<Quote>
		{
			Data =  DbContext.Quotes
				    .Where(q => q.Title.Contains(request.UserInput))
					.OrderBy(q => q.Title).ToList()
		};
	}

	private async Task<Quote> ResolveAutosuggestItemFromValue(int value)
	{
		await Task.Delay(400); // backend API speed simulation
        Quote quote = await DbContext.Quotes.FindAsync(value);
		return quote;
	} *@
    private async Task InsertQuoteLink()   //not working yet for TinyMCE. Cannot insert text at cursor point
	{
		var QuoteId = quoteId;
        //var quote = DbContext.Quotes.FirstOrDefault(x => x.QuoteId == QuoteId);
        // string link = $" [{quote?.Title}](https://thequoteapp.azurewebsites.net/view/{QuoteId}) "; // for markup
        string link = $"<a href='https://thequoteapp.azurewebsites.net/view/{QuoteId}'>{title}</a>";
        quoteLinkModal.Hide();
        // quoteId = 0;
        // await this.QuillHtml.InsertText(link);
        await jsRuntime.InvokeVoidAsync("insertContent",link);
        Text = TinyEditor.Value; // persist the value
	}

}

