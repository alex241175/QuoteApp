@inject DatabaseContext DbContext
@inject IJSRuntime jsRuntime
@using Markdig
@using Chinese

<label for="text" class="col-form-label my-2">內容:</label>
<a class="btn btn-light mx-2" @onclick="OpenMarkdown">Markdown Syntax Quick</a>
<a class="btn btn-light mx-2" href="https://www.markdownguide.org/cheat-sheet/">Cheatsheet</a>
<a class="btn btn-light mx-2" @onclick="Beautify">整理</a>
<a class="btn btn-light mx-2" @onclick="ConvertTraditional">繁</a>
<a class="btn btn-light mx-2" @onclick="OpenQuoteLink">插入語錄</a>


<div class="row">
    <div class="col">                            
        <div class="grow-wrap">
             @* <textarea class="form-control" @ref="textRef" value="@Text"></textarea> *@
            <textarea class="form-control" @ref="textRef" value="@Text" @oninput="args => OnTextInput(textRef, args)"></textarea> 
        </div>
    </div>
    <div class="col">
       <p> @((MarkupString) Preview) </p>
    </div>
</div>

<HxModal @ref="markdownModal" Size="ModalSize.Large" Fullscreen="ModalFullscreen.MediumDown" Title="Markdown syntax">
	<BodyTemplate>
        <pre>
            Heading : add # in the front (put blank lines before and after)
            Paragraph : create blank Line 
            Line Break : end line with two space and type return
            Emphasis : add asterisk before and after
            Blockquotes : add > in front
            Ordered List :  add 1.  2.  3.  in the front
            Unordered List : add - * in the front
            Horizontal Rules : *** or --- or ___
            Links : [Links](https://duckukgo.com) or enclose URL in angle brackets
            Escape characters : add \
            Table : | Header | Description |  second row |------|-----|
            Footnote : Here's a sentence with a footnote
            Highlight : ==very important==

        </pre>
	</BodyTemplate>
	<FooterTemplate>
		<HxButton Text="Close" OnClick="CloseMarkdown" Color="ThemeColor.Primary" />
	</FooterTemplate>
</HxModal>
<HxModal @ref="quoteLinkModal" Size="ModalSize.Large" Fullscreen="ModalFullscreen.MediumDown" Title="插入語錄">
	    <BodyTemplate>
        <HxAutosuggest Label=""
                    Placeholder="請輸入語錄標題"
                    TItem="Quote"
                    TValue="int"
                    MinimumLength="1"
                    @bind-Value="@autosuggestValue"
                    DataProvider="ProvideSuggestions"
                    ValueSelector="(Quote q) => q.QuoteId"
                    TextSelector="(Quote q) => q.Title"
                    ItemFromValueResolver="ResolveAutosuggestItemFromValue">
                    <ItemTemplate Context="item">@item.Title <sup>@item.QuoteId</sup></ItemTemplate>
                    <EmptyTemplate>
                        <span class="p-2">找不到語錄標題</span>
                    </EmptyTemplate>
        </HxAutosuggest>
        <HxButton Text="Insert" OnClick="InsertQuoteLink" Color="ThemeColor.Primary" />
	</BodyTemplate>
</HxModal>

@code{

    [Parameter]
    public string Text { get; set;}
    ElementReference textRef { get; set; }
    public string Preview => Markdown.ToHtml(Text, new MarkdownPipelineBuilder().UseAdvancedExtensions().Build());
    [Parameter]
    public EventCallback<string> TextChanged {get;set;}

    private HxModal markdownModal;
    private HxModal quoteLinkModal;
    private int autosuggestValue { get; set; }

	private async Task OpenMarkdown()
	{
		await markdownModal.ShowAsync();
	}

	private async Task CloseMarkdown()
	{
		await markdownModal.HideAsync();
	}

    private async Task OpenQuoteLink()
	{
		await quoteLinkModal.ShowAsync();
	}
    private async Task CloseQuoteLink()
	{
		await quoteLinkModal.HideAsync();
	}
    private async Task InsertQuoteLink()
	{
		var QuoteId = autosuggestValue;
        var quote = DbContext.Quotes.FirstOrDefault(x => x.QuoteId == QuoteId);
        string link = $" [{quote?.Title}](https://thequoteapp.azurewebsites.net/view/{QuoteId}) ";
        await quoteLinkModal.HideAsync();
        autosuggestValue = 0;
        Text = await jsRuntime.InvokeAsync<string>("getInsertAtCursorValue", textRef, link);
        StateHasChanged();
        await TextChanged.InvokeAsync(Text);
	}

	private async Task<AutosuggestDataProviderResult<Quote>> ProvideSuggestions(AutosuggestDataProviderRequest request)
	{
		await Task.Delay(400); // backend API speed simulation
		return new AutosuggestDataProviderResult<Quote>
		{
			Data =  DbContext.Quotes
				    .Where(q => q.Title.Contains(request.UserInput))
					.OrderBy(q => q.Title).ToList()
		};
	}

	private async Task<Quote> ResolveAutosuggestItemFromValue(int value)
	{
		await Task.Delay(400); // backend API speed simulation
		return await DbContext.Quotes.FindAsync(value);
	}

    private async Task Beautify()
	{
		Text = Text.Replace(",","，").Replace(";","；").Replace(":","：");  // 標點輔全型
        await TextChanged.InvokeAsync(Text);  
	}
   private async Task ConvertTraditional()
	{
		Text = ChineseConverter.ToTraditional(Text);
        await TextChanged.InvokeAsync(Text);  
	}
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
           //trigger oninput event of text inputbox to expand the textarea
           await jsRuntime.InvokeVoidAsync("replicateValue", textRef);   // auto expand textarea 
        }
    }
    private async void OnTextInput(ElementReference textRef, ChangeEventArgs args)
    {
        Text = (string)args.Value; 
        TextChanged.InvokeAsync(Text);      
        await jsRuntime.InvokeVoidAsync("replicateValue", textRef);   // auto expand textarea
    }

}