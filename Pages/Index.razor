@page "/"
@inject DatabaseContext DbContext
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject StateContainerService stateService
@inject HelperFunction func
@using MarkdownRemove

<PageTitle>語錄：首頁</PageTitle>

@if (Role == "Admin"){
    <form class="row">
        <div class="col-auto">
            <a class="btn btn-primary" href="Create">新增</a>
        </div>
        <div class="col-auto">
            <div class="input-group">
                <input class="form-control mx-2" @bind="Query" placeholder="查詢..." @onblur="@Search" />
                @if(!string.IsNullOrEmpty(Tag)){
                    <span class="mx-2"> filter : @Tag</span>
                }
                <button class="btn btn-outline-secondary" @onclick="@Cancel">X</button>
            </div>
        </div>
    </form>

    @if (Quotes == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        @foreach (var q in Quotes)
        {
            <div class="card mt-2">
                <div class="card-body">
                    <h5 class="hand">
                        <span @onclick="() => ViewQuote(q.QuoteId)">@q.Title</span>
                        @if(!string.IsNullOrEmpty(q.Tags)){
                            <small style="float:right;">
                            @foreach (var t in q.Tags.Split(",")){
                                <span class="badge bg-secondary mx-1" @onclick="()=> FilterByTag(t)">@t</span>
                            }
                            </small>
                        }
                    </h5>
                        @if(string.IsNullOrEmpty(Query)){
                            @if(q.Text.Length > 100){
                                <p>@(markdownRemover.RemoveMarkdown(q.Text.Substring(0,100)) + "..." ) </p>
                            }else{
                                <p>@(markdownRemover.RemoveMarkdown(q.Text))</p>                                
                            }
                        }else{
                            <p>@(GetMatchedSnippet(markdownRemover.RemoveMarkdown(q.Text), Query))</p>
                        }
                    
                </div>
            </div>
        }    
        <Pagination CurrentPage="@CurrentPage" PageSize ="@PageSize" Count="@Count" PageRangeSize="@PageRangeSize" OnLoad="LoadPage"></Pagination>
    }
}


@code{

    private List<Quote> Quotes = default!;
    private int CurrentPage = 1;
    private string Tag = "";
    private int PageSize = 10;
    private int PageRangeSize = 2;
    private int Count = 0;
    private ClaimsPrincipal? User;
    private string? Role;
    private string Query = "";
    MarkdownRemover markdownRemover = new MarkdownRemover(); // To create a markdown remover with default options
    protected override async Task OnInitializedAsync()
    {
        Query = stateService.Query;
        Tag = stateService.Tag;
        CurrentPage = stateService.Page;
        await LoadPage(CurrentPage);
        
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        User = authState.User;
        Role = User.Claims.Where(x => x.Type == ClaimTypes.Role).Select(x => x.Value).SingleOrDefault(); 

    }

    private async Task LoadPage(int PageNumber){
        // var quotes = DbContext.Quotes.AsQueryable();

       stateService.SetPage(PageNumber);
       var quotes = from q in DbContext.Quotes select q;
       
       if (!string.IsNullOrEmpty(Tag)){
           quotes = quotes.Where( x => x.Tags.Contains(Tag));
       }
       if (!string.IsNullOrEmpty(Query)){
            // quotes = quotes.Where(x => x.Title.Contains(Query) || x.Text.Contains(Query) || x.Note.Contains(Query));
            quotes = from q in DbContext.Quotes
                   join fts in DbContext.QuoteSearch(Query)
                   on q.QuoteId equals fts.Key
                   orderby fts.Rank descending
                   select q; 
        } 
        quotes = quotes.OrderByDescending(x => x.QuoteId);
        Count = quotes.Count();
        CurrentPage = PageNumber;        
        Quotes = await quotes.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToListAsync();

    }
    private void ViewQuote(int id){
        NavigationManager.NavigateTo("/view/" + id);
    }

    private async Task Search(){
        Tag = "";
        stateService.SetTag(Tag);
        CurrentPage = 1;
        stateService.SetPage(CurrentPage);
        stateService.SetQuery(Query);
        await LoadPage(CurrentPage);
    }

     private async Task FilterByTag(string tag){
        Tag = tag;
        stateService.SetTag(Tag);
        Query = "";
        stateService.SetQuery(Query);
        CurrentPage = 1;
        stateService.SetPage(CurrentPage);
        await LoadPage(CurrentPage);
    }
    private async Task Cancel(){
        Query = "";
        stateService.SetQuery(Query);
        Tag = "";
        stateService.SetTag(Tag);
        CurrentPage = 1;
        stateService.SetPage(CurrentPage);
        await LoadPage(CurrentPage);
    }

    private static string GetMatchedSnippet(string Text, string Query)
    {
        int index = Text.IndexOf(Query);   //index 
        int count = 0;
        int maxLength = 10;
        string result = "";

        while (index != -1 && count < 5) {
            int startIndex = 0;
            startIndex = (index - maxLength) < 0 ? 0 : index - maxLength;
            result += Text.Substring(startIndex, maxLength) + "<span style='color:red'>" + Query +  "</span>" + Text.Substring(index + Query.Length, maxLength) + " ... "; // return match
            count++;
            Text = Text.Substring(index + Query.Length);
            index = Text.IndexOf(Query);
        }
        return result;
    }
}
