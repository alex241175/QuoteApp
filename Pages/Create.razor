@page "/create"
@inject DatabaseContext DbContext
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime

<PageTitle>語錄：新增</PageTitle>

<h1>新增</h1>

<form method="post">
    <div class="form-group">
        <label for="title" class="col-form-label">主題:</label>                            
        <input type="text" class="form-control" id="title" @bind="Quote.Title" autocomplete="off">
    </div>
    <div class="form-group">
        @* <TextInput Text="@Quote.Text" TextChanged="TextChanged"></TextInput> *@
        @* <TextInputHtml @ref="textInputHtml"/> *@
        <TextInputTinyMCE @ref="TinyEditor"></TextInputTinyMCE>
    </div>
    <div class="form-group">
        <label for="source" class="col-form-label">出處:</label>                            
        @* <input type="text" class="form-control" id="source" @bind="Quote.Source" autocomplete="off"> *@
        <Autocomplete TItem="string"
            TValue="string"
            Data="@allSource"
            TextField="@((item) => item)"
            ValueField="@((item) => item)"
            Placeholder=""
            Filter="AutocompleteFilter.StartsWith"
            CustomFilter="@(( item, searchValue ) => item.IndexOf( searchValue, 0, StringComparison.CurrentCultureIgnoreCase ) >= 0 )"
            FreeTyping
            @bind-SelectedValue="@Quote.Source"
            @bind-SelectedText="@selectedSource">
        </Autocomplete>
    </div>
    <div class="form-group">
        <label for="note" class="col-form-label">備註:</label>                            
        <div class="grow-wrap">
            <textarea class="form-control" id="note" @bind="Quote.Note" onInput="this.parentNode.dataset.replicatedValue = this.value"></textarea>
        </div>
    </div>
    <div class="form-group">
        <label for="" class="col-form-label">Tags:</label>   
        <Autocomplete TItem="Tag"
              TValue="string"
              Data="@tagsInputSuggestion"
              TextField="@((item) => item.Value)"
              ValueField="@((item) => item.Key)"
              Placeholder=""
              Multiple
              FreeTyping
              @bind-SelectedValues="tagsInput"
              @bind-SelectedTexts="tagsInput">
        </Autocomplete> 
        @* <HxInputTags Label="Tags" @bind-Value="tagsInput"
              DataProvider="GetNewItemSuggestions"
			 SuggestDelay="1000"
			 SuggestMinimumLength="0" /> *@
         @foreach (var t in QuoteApp.Data.Config.tagsSelection){ 
            <span class="hand badge bg-light text-dark mx-1" @onclick="()=> AddTag(t)">@t</span>
         }
        @* <small class="text-muted">類別：故事 課題 語錄 名詞 資訊 經典</small> *@
    </div>
    <div class="form-group">
        <label for="private" class="form-check-label">保密:</label>                            
        <input id="private" type="checkbox" checked="@Quote.Private" @onclick="CheckChanged">
    </div>
    <div class="form-group">
        <button type="button" class="btn btn-primary" @onclick=@Save>Save</button>
        <button type="button" class="btn btn-primary" @onclick=@Cancel>Cancel</button>
    </div>
</form>

@code{

    private Quote Quote {get;set;} = new Quote();
    private List<string>? allSource {get;set;}
    private string selectedSource { get; set; } ="";
    public class Tag{
        public string Key {get;set;}
        public string Value { get; set; }
    }
    private List<Tag> tagsInputSuggestion = new List<Tag>{};
    List<string> tagsInput;
    // List<string> multipleSelectionData;
    //List<string> multipleSelectionTexts = new();
    @* private Task<InputTagsDataProviderResult> GetNewItemSuggestions(InputTagsDataProviderRequest request)
	{
		string tagsLine = string.Join(",", DbContext.Quotes.Select(x => x.Tags));  //output : green,red,green,yellow

        return Task.FromResult(new InputTagsDataProviderResult()
		{
            Data = tagsLine.Split(",").ToList().Distinct().AsEnumerable()
		});
	} *@

    // TextInputHtml textInputHtml;
    TextInputTinyMCE TinyEditor;

    protected override async Task OnInitializedAsync()
    {
        string tagsLine = string.Join(",", DbContext.Quotes.Select(x => x.Tags));  //output : green,red,green,yellow
        tagsInputSuggestion = tagsLine.Split(",").ToList().Distinct().Select( x => new Tag { Key = x, Value = x }).ToList();
        tagsInput = new List<string>() {};
        allSource = DbContext.Quotes.Select(x => x.Source).ToList().Distinct().ToList();
        await base.OnInitializedAsync();
       
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
           //trigger oninput event of text inputbox to expand the textarea
           //await jsRuntime.InvokeVoidAsync("triggerinput", "note");  
        }
    }

    private void CheckChanged()
    {
        Quote.Private = !Quote.Private;
    }
    @* private void TextChanged(string Text)
    {
        Quote.Text = Text;
    } *@

    private void Cancel()
    {
        NavigationManager.NavigateTo("/");       
    }
     private void AddTag(string t){
        tagsInput.Add(t);
        StateHasChanged();
    }
    private async Task Save()
    {
        Quote.Text = TinyEditor.GetContent();
        Quote.Tags = string.Join(",", tagsInput);
        Quote.Source = selectedSource;
        Quote.Created = DateTime.Now;
        await DbContext.Quotes.AddAsync(Quote);
        await DbContext.SaveChangesAsync();
        NavigationManager.NavigateTo("/");
    }
}