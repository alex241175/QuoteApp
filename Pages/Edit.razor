@page "/edit/{id:int}"
@inject DatabaseContext DbContext
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime
@attribute [Authorize(Policy = "IsAdmin")]  
@implements IDisposable

<PageTitle>語錄：修改</PageTitle>

<a class="btn btn-primary mb-2" @onclick='()=> {jsRuntime.InvokeVoidAsync("history.back");}'>&lt;</a>
<h1>修改</h1>

<form method="post">
    <div class="form-group">
        <label for="title" class="col-form-label">主題:</label>                            
        <input type="text" class="form-control" id="title" @bind="Quote.Title" autocomplete="off">
    </div>
    <div class="form-group">
        @* <TextInput Text="@Quote.Text" TextChanged="TextChanged"></TextInput> *@
        @* <TextInputHtml @ref="textInputHtml"/> *@
        <TextInputTinyMCE Text="@Quote.Text" @ref="TinyEditor"></TextInputTinyMCE>
    </div>
    <div class="form-group">
        <label for="source" class="col-form-label">出處:</label>                            
        <input type="text" class="form-control" for="source" @bind="Quote.Source" autocomplete="off">
    </div>
    <div class="form-group">
        <label for="note" class="col-form-label">備註:</label>                            
        <div class="grow-wrap">
            <textarea class="form-control" id="note" @bind="Quote.Note" onInput="this.parentNode.dataset.replicatedValue = this.value"></textarea>
        </div>
    </div>
    <div class="form-group">
       <HxInputTags Label="Tags" @bind-Value="tagsInput"
              DataProvider="GetNewItemSuggestions"
			  SuggestDelay="0"
			  SuggestMinimumLength="0" />
    </div>
    <div class="form-group">
        <label for="private" class="col-form-label">保密:</label>                            
        <input class="form-check-input" id="private" type="checkbox" checked="@Quote.Private" @onclick="CheckChanged">
    </div>
    <div class="form-group mt-4">
        <button type="button" class="btn btn-primary" @onclick=@Save>Save</button>
        <button type="button" class="btn btn-primary" @onclick=@Cancel>Cancel</button>
    </div>
</form>

@code{

    private Quote Quote {get;set;} = new Quote();
    private List<string> tagsInput = new List<string>{};

	private Task<InputTagsDataProviderResult> GetNewItemSuggestions(InputTagsDataProviderRequest request)
	{
		string tagsLine = string.Join(",", DbContext.Quotes.Select(x => x.Tags));  //output : green,red,green,yellow

        return Task.FromResult(new InputTagsDataProviderResult()
		{
            Data = tagsLine.Split(",").ToList().Distinct().AsEnumerable()
		});
	}
    [Parameter]
    public int Id {get;set;}
     // TextInputHtml textInputHtml;
    TextInputTinyMCE TinyEditor;

    protected override async Task OnInitializedAsync()
    {
        Quote = await DbContext.Quotes.FindAsync(Id);

        if (!string.IsNullOrEmpty(Quote.Tags)){
            tagsInput = Quote.Tags.Split(",").ToList();   
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
           //trigger oninput event of text inputbox to expand the textarea
           await jsRuntime.InvokeVoidAsync("triggerinput", "note");
           // textInputHtml.SetHTML(Quote.Text);
        }
    }
    private void CheckChanged()
    {
        Quote.Private = !Quote.Private;
    }

     private void TextChanged(string Text)
    {
        Quote.Text = Text;
    }

    private void Cancel()
    {
         DbContext.Entry(Quote).State = EntityState.Unchanged;  //revert all unsaved changes
         NavigationManager.NavigateTo("/view/"+ Id);
    }
    private async Task Save()
    {
        // Quote.Text = await textInputHtml.GetHTML();
        Quote.Text = TinyEditor.GetContent();
        Quote.Tags = string.Join(",", tagsInput);
        DbContext.Quotes.Update(Quote);
        await DbContext.SaveChangesAsync();
        NavigationManager.NavigateTo("/view/"+ Id);
    }

    public void Dispose()
    {
        DbContext.Entry(Quote).State = EntityState.Unchanged;  //revert all unsaved changes
    }
}