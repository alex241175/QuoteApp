@page "/list"
@inject DatabaseContext DbContext
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject StateContainerService stateService
@inject HelperFunction func
@inject IJSRuntime JS
@using System.Text.RegularExpressions
@using ClosedXML.Excel
@using System.IO
@implements IDisposable

<PageTitle>筆記本：首頁</PageTitle>

<AuthorizeView Policy="IsAdmin">    
    <Authorized> 
        <div class="row">
            <div class="col-auto">
                <a class="btn btn-primary" href="Create">新增</a>
            </div>
            <div class="col-auto">
                <div class="input-group">
                    @* <input class="form-control mx-2" @bind="QueryString" /> *@
                     <Autocomplete TItem="string"
                        TValue="string"
                        Data="@allTitle"
                        TextField="@((item) => item)"
                        ValueField="@((item) => item)"
                        Placeholder=""
                        Filter="AutocompleteFilter.StartsWith"
                        CustomFilter="@(( item, searchValue ) => item.IndexOf( searchValue, 0, StringComparison.CurrentCultureIgnoreCase ) >= 0 )"
                        FreeTyping
                        MaxMenuHeight="400px"
                        @bind-SelectedValue="@QueryString"
                        @bind-SelectedText="@selectedQuery">
                    </Autocomplete>
                    <button type="button" class="ml-4 btn btn-light" @onclick="@Search" >查詢</button> 
                    @* <button type="button" class="btn btn-light mx-2" @onclick="@Cancel">X</button> *@
                </div>   
            </div>
            <div class="col-auto">
            @if(!string.IsNullOrEmpty(Tag)){
                <span class="mx-2 hand" style="float:right;" @onclick='()=> FilterByTag("")'> tag : @Tag x</span>
            }
            </div>
            <div class="col-auto">
                <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" checked="@compact" @onchange="(e) => ShowCompact(e)">
                    <label class="form-check-label" for="flexSwitchCheckDefault">Compact</label>
                </div>
            </div>
            <div>
                <button type="button" class="ml-4 btn btn-light" @onclick="@Download">下載</button> 
            </div>
        </div>
        <div class="row my-2">
             <div class="col-auto">
             總數 : <span>@Count</span> 
             </div>
        </div>

        @if (Quotes == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            @if(Quotes.Count == 0){
                <p><em>無資料...</em></p>
            }else{
                @foreach (var q in Quotes)
                {
                    // compact view
                    @if (compact == true && string.IsNullOrEmpty(Query)){
                        <div class="row mt-2 px-3 py-1 hand border-bottom">
                            <span @onclick="() => ViewQuote(q.QuoteId)">@q.Title</span>
                            @if(!string.IsNullOrEmpty(q.Tags)){
                            <small style="float:right;">
                            @foreach (var t in q.Tags.Split(",")){
                                <span class="badge bg-light text-dark mx-1" @onclick="()=> FilterByTag(t)">@t</span>
                            }
                            </small>
                            }
                        </div>
                        
                    // detailed view
                    }else{
                        <div class="card mt-2">
                            <div class="card-body">
                                <h5 class="hand">
                                    <span @onclick="() => ViewQuote(q.QuoteId)">@q.Title</span>
                                    @if(!string.IsNullOrEmpty(q.Tags)){
                                        <small style="float:right;">
                                        @foreach (var t in q.Tags.Split(",")){
                                            <span class="badge bg-light text-dark mx-1" @onclick="()=> FilterByTag(t)">@t</span>
                                        }
                                        </small>
                                    }
                                </h5>
                                    <p>
                                    @if(string.IsNullOrEmpty(Query)){
                                        @if(q.Text.Length > 100){
                                            @(StripHTML(q.Text.Substring(0,100)) + "..." )
                                        }else{
                                            @(StripHTML(q.Text))                              
                                        }
                                    }else{
                                        @((MarkupString)GetMatchedSnippet(StripHTML(q.Text), Query))
                                    }
                                    </p>
                                
                            </div>
                        </div>                        
                    }
                }    
                <PaginationComponent CurrentPage="@CurrentPage" PageSize ="@PageSize" Count="@Count" PageRangeSize="@PageRangeSize" OnLoad="LoadPage"/>
            }
        }
    </Authorized>    
    <NotAuthorized>    
        <p>Please signed in.</p>    
    </NotAuthorized>    
</AuthorizeView>   

@code{

    private string? Tag { get; set;}
    private List<Quote> Quotes = new();
    private List<string>? allTitle {get;set;}
    private bool compact;
    private string selectedQuery { get; set; } = "";
    private int CurrentPage = 1;
    private string Query = "";
    private int PageSize => compact ? 100 : 10;
    private int PageRangeSize = 2;
    private int Count = 0;
    private ClaimsPrincipal? User;
    private string? Role;
    private string QueryString = "";   
    protected override void OnInitialized()
    {
        @* StringValues tag;  
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);  
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("tag", out tag))  
        {  
            stateService.SetTag(tag);
            stateService.SetQuery("");
            stateService.SetPage(1);
        }   *@

        Query = stateService.Query;        
        QueryString = Query;
        Tag = stateService.Tag;
        CurrentPage = stateService.Page;
        compact = stateService.Compact;
        //stateService.OnStateChange += MyEventHandler;        
        stateService.OnFilterByTag += OnFilterByTag;  //trigger from NavMenu
        //stateService.OnReloadList += OnReloadList; //trigger from NavMenu
        allTitle = DbContext.Quotes.Select(x => x.Title).ToList().Distinct().ToList();

        LoadPage(CurrentPage);

        @* var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        User = authState.User;
        Role = User.Claims.Where(x => x.Type == ClaimTypes.Role).Select(x => x.Value).SingleOrDefault();  *@

    }

    private void ShowCompact(ChangeEventArgs e){
        compact = (bool)e.Value ;
        stateService.SetCompact(compact);
        LoadPage(CurrentPage);
    }
    private void OnFilterByTag()
    {
        Console.WriteLine(stateService.Tag);    // can trigger
        FilterByTag(stateService.Tag);
        StateHasChanged();
        //await LoadPage(CurrentPage);  // quite a lot of unexpected tourble
    }
     @* private async void OnReloadList()
    {
        Console.WriteLine("Reloading list ...");    // can trigger
        Tag = "";
        stateService.SetTag(Tag);
        Query = "";
        QueryString ="";
        stateService.SetQuery(Query);
        CurrentPage = 1;
        stateService.SetPage(CurrentPage); 
        await LoadPage(CurrentPage);
        StateHasChanged();
    } *@
    private void LoadPage(int PageNumber){
        // var quotes = DbContext.Quotes.AsQueryable();

       var quotes = from q in DbContext.Quotes select q;
       
       if (!string.IsNullOrEmpty(Tag)){
           quotes = quotes.Where( x => x.Tags.Contains(Tag));
       }
       if (!string.IsNullOrEmpty(Query)){
            // quotes = quotes.Where(x => x.Title.Contains(Query) || x.Text.Contains(Query) || x.Note.Contains(Query));      

            // method 1 : loop thru data to count relevant score
            
            var arrQuery = Query.Split(' ');           
            List<Quote> result = new();
            int count = 0;

            foreach (var quote in quotes){

                int score = 0;

                foreach (var q in arrQuery){
                    //Title
                    count = new Regex(q.ToString()).Matches(quote.Title).Count;
                    if (count> 0 ){
                        score += count * 5;
                    }
                    //Source
                    count = new Regex(q.ToString()).Matches(quote.Source).Count;
                    if (count> 0 ){
                        score += count;
                    }
                    //Text
                    count = new Regex(q.ToString()).Matches(quote.Text).Count;
                    if (count> 0 ){
                        score += count;
                    }
                    //Note
                    count = new Regex(q.ToString()).Matches(quote.Note).Count;
                    if (count> 0 ){
                        score += count;
                    }
                    //Tags
                    count = new Regex(q.ToString()).Matches(quote.Tags).Count;
                    if (count> 0 ){
                        score += count * 5;
                    }
                }

                if (score > 0){
                    quote.Score = score;
                    result.Add(quote);
                }
            }

            quotes = result.AsQueryable();
            quotes = quotes.OrderByDescending(x => x.Score);
            // method 2 : make use of sql server full text search to sort result by relevance   
		    @* 
            var arr = Query.Split(' ').Select(s => '"' + s + '"').ToArray();             // preprocess Query  道 但是  ＝> '"道" and "但是"' 
            var keywords = string.Join(" and ", arr);
            quotes = from q in DbContext.Quotes
                   join fts in DbContext.QuoteSearch(keywords)
                   on q.QuoteId equals fts.Key
                   orderby fts.Rank descending
                   select q;  *@
        }else{

            quotes = quotes.OrderByDescending(x => x.QuoteId);

        } 
        Count = quotes.Count();
        CurrentPage = PageNumber;      
        Quotes = quotes.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();    
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
           var scrollPos = stateService.ScrollPos;
           await JS.InvokeVoidAsync("setScrollPos", scrollPos);   
    }
    private async Task ViewQuote(int id){
        int scrollPos = await JS.InvokeAsync<int>("getScrollPos");
        stateService.SetScrollPos(scrollPos);
        NavigationManager.NavigateTo("/view/" + id);
    }

    private void Search(){
        //this is a tag search
        if (selectedQuery.Contains("tag:")){
            string tag = selectedQuery.Substring(4);
            FilterByTag(tag);
        }else{
            Tag = "";
            stateService.SetTag(Tag);
            CurrentPage = 1;
            //Query = QueryString;
            Query = selectedQuery;
            stateService.SetPage(CurrentPage);
            stateService.SetQuery(Query);
            stateService.SetScrollPos(0);
            LoadPage(CurrentPage);
        }
    }

     private void FilterByTag(string tag){
        Tag = tag;
        stateService.SetTag(Tag);
        Query = "";
        QueryString ="";
        stateService.SetQuery(Query);
        CurrentPage = 1;
        stateService.SetPage(CurrentPage); 
        LoadPage(CurrentPage);
    }
    private void Cancel(){
        QueryString = "";
    }
    private async void Download(){
        using (var workbook = new XLWorkbook())
        {
            var worksheet = workbook.Worksheets.Add("Data");
            var currentRow = 1;
            worksheet.Cell(currentRow, 1).Value = "Id";
            worksheet.Cell(currentRow, 2).Value = "主題";
            worksheet.Cell(currentRow, 3).Value = "內容";
            worksheet.Cell(currentRow, 4).Value = "出處";
            worksheet.Cell(currentRow, 5).Value = "標記";
            worksheet.Cell(currentRow, 6).Value = "備註";
            foreach (var q in Quotes.OrderBy(x => x.QuoteId))
            {
                currentRow++;                
                worksheet.Cell(currentRow, 1).Value = q.QuoteId;
                worksheet.Cell(currentRow, 2).Value = q.Title;
                worksheet.Cell(currentRow, 3).Value = q.Text;
                worksheet.Cell(currentRow, 4).Value = q.Source;
                worksheet.Cell(currentRow, 5).Value = q.Tags;
                worksheet.Cell(currentRow, 6).Value = q.Note;
                worksheet.Row(currentRow).Height = 15;
            }
            worksheet.Column(2).Width = 30;
            worksheet.Column(3).Width = 90;

            using (var stream = new MemoryStream())
            {
                workbook.SaveAs(stream);
                var content = stream.ToArray();
                await JS.InvokeVoidAsync("saveAsFile", $"QuoteApp_{DateTime.Now.ToString("yyyyMMdd_HHmmss")}.xlsx", Convert.ToBase64String(content));  
            }
        }
    }
    private static string GetMatchedSnippet(string FullText, string Query)
    {
        const int maxLength = 10;
        string Text = "";
        string result = "";
        foreach(var q in Query.Split(' '))
        {
            Text = FullText;
            int index = Text.IndexOf(q);   //index 
            int count = 0;
            while (index != -1 && count < 5) {
                int startIndex = 0;
                int endOffset = 0;  //the offset position after the found query position
                startIndex = (index - maxLength) < 0 ? 0 : index - maxLength;
                result += Text.Substring(startIndex, maxLength) + "<span style='color:red'>" + q +  "</span>";
                endOffset = Math.Min(Text.Length - index - q.Length, maxLength);
                if (endOffset > 0 ){
                    result += Text.Substring(index + q.Length, endOffset) + " ... "; // return match
                }                
                count++;
                Text = Text.Substring(index + q.Length);
                index = Text.IndexOf(q);
            }
        }
        if (string.IsNullOrEmpty(result)){
            if(FullText.Length > 100){
                return FullText.Substring(0,100) + "...";
            }else{
                return FullText;                              
            }
        } else{
            return result;
        }
    }

    public static string StripHTML(string input)
    {
        return Regex.Replace(input, "<.*?>", String.Empty);
    }

     public void Dispose()
    {
        stateService.OnFilterByTag -= OnFilterByTag;
        //stateService.OnReloadList -= OnReloadList;
    }
}
