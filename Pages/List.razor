@page "/list"
@inject DatabaseContext DbContext
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject StateContainerService stateService
@inject HelperFunction func
@inject IJSRuntime JS
@using MarkdownRemove
@using Microsoft.AspNetCore.WebUtilities;  
@using Microsoft.Extensions.Primitives;  
@implements IDisposable

<PageTitle>語錄：首頁</PageTitle>

<AuthorizeView Policy="IsAdmin">    
    <Authorized> 
        <div class="row">
            <div class="col-auto">
                <a class="btn btn-primary" href="Create">新增</a>
            </div>
            <div class="col-auto">
                <div class="input-group">
                    <input class="form-control mx-2" @bind="QueryString" />
                    <button type="button" class="btn btn-light" @onclick="@Search" >查詢</button> 
                    <button type="button" class="btn btn-light mx-2" @onclick="@Cancel">X</button>
                </div>   
            </div>
            <div class="col-auto">
            @if(!string.IsNullOrEmpty(Tag)){
                <span class="mx-2 hand" style="float:right;" @onclick='()=> FilterByTag("")'> tag : @Tag x</span>
            }
            </div>
        </div>

        @if (Quotes == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            @foreach (var q in Quotes)
            {
                <div class="card mt-2">
                    <div class="card-body">
                        <h5 class="hand">
                            <span @onclick="() => ViewQuote(q.QuoteId)">@q.Title</span>
                            @if(!string.IsNullOrEmpty(q.Tags)){
                                <small style="float:right;">
                                @foreach (var t in q.Tags.Split(",")){
                                    <span class="badge bg-light text-dark mx-1" @onclick="()=> FilterByTag(t)">@t</span>
                                }
                                </small>
                            }
                        </h5>
                            <p>
                            @if(string.IsNullOrEmpty(Query)){
                                @if(q.Text.Length > 100){
                                    @(markdownRemover.RemoveMarkdown(q.Text.Substring(0,100)) + "..." )
                                }else{
                                    @(markdownRemover.RemoveMarkdown(q.Text))                              
                                }
                            }else{
                                @((MarkupString)GetMatchedSnippet(markdownRemover.RemoveMarkdown(q.Text), Query))
                            }
                            </p>
                        
                    </div>
                </div>
            }    
            <Pagination CurrentPage="@CurrentPage" PageSize ="@PageSize" Count="@Count" PageRangeSize="@PageRangeSize" OnLoad="LoadPage"></Pagination>
        }
    </Authorized>    
    <NotAuthorized>    
        <p>Please signed in.</p>    
    </NotAuthorized>    
</AuthorizeView>   

@code{

    private string Tag { get; set; }
    private List<Quote> Quotes = default!;
    private int CurrentPage = 1;
    private string Query = "";
    private int PageSize = 10;
    private int PageRangeSize = 2;
    private int Count = 0;
    private ClaimsPrincipal? User;
    private string? Role;
    private string QueryString = "";
    MarkdownRemover markdownRemover = new MarkdownRemover(); // To create a markdown remover with default options
    
    protected override async Task OnInitializedAsync()
    {
        @* StringValues tag;  
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);  
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("tag", out tag))  
        {  
            stateService.SetTag(tag);
            stateService.SetQuery("");
            stateService.SetPage(1);
        }   *@

        Query = stateService.Query;        
        QueryString = Query;
        Tag = stateService.Tag;
        CurrentPage = stateService.Page;
        //stateService.OnStateChange += MyEventHandler;        
        stateService.OnFilterByTag += OnFilterByTag;  //trigger from NavMenu
        //stateService.OnReloadList += OnReloadList; //trigger from NavMenu

        await LoadPage(CurrentPage);

        @* var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        User = authState.User;
        Role = User.Claims.Where(x => x.Type == ClaimTypes.Role).Select(x => x.Value).SingleOrDefault();  *@

    }

    private async void OnFilterByTag()
    {
        Console.WriteLine(stateService.Tag);    // can trigger
        await FilterByTag(stateService.Tag);
        StateHasChanged();
        //await LoadPage(CurrentPage);  // quite a lot of unexpected tourble
    }
     @* private async void OnReloadList()
    {
        Console.WriteLine("Reloading list ...");    // can trigger
        Tag = "";
        stateService.SetTag(Tag);
        Query = "";
        QueryString ="";
        stateService.SetQuery(Query);
        CurrentPage = 1;
        stateService.SetPage(CurrentPage); 
        await LoadPage(CurrentPage);
        StateHasChanged();
    } *@
    private async Task LoadPage(int PageNumber){
        // var quotes = DbContext.Quotes.AsQueryable();

       var quotes = from q in DbContext.Quotes select q;
       
       if (!string.IsNullOrEmpty(Tag)){
           quotes = quotes.Where( x => x.Tags.Contains(Tag));
       }
       if (!string.IsNullOrEmpty(Query)){
            // quotes = quotes.Where(x => x.Title.Contains(Query) || x.Text.Contains(Query) || x.Note.Contains(Query));
            // preprocess Query  道 但是  ＝> '"道" and "但是"'
            var arr = Query.Split(' ').Select(s => '"' + s + '"').ToArray();    
		    var keywords = string.Join(" and ", arr);
            quotes = from q in DbContext.Quotes
                   join fts in DbContext.QuoteSearch(keywords)
                   on q.QuoteId equals fts.Key
                   orderby fts.Rank descending
                   select q; 
        } 
        quotes = quotes.OrderByDescending(x => x.QuoteId);
        Count = quotes.Count();
        CurrentPage = PageNumber;      
        Quotes = await quotes.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToListAsync();    
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
           var scrollPos = stateService.ScrollPos;
           await JS.InvokeVoidAsync("setScrollPos", scrollPos);   
    }
    private async Task ViewQuote(int id){
        int scrollPos = await JS.InvokeAsync<int>("getScrollPos");
        stateService.SetScrollPos(scrollPos);
        NavigationManager.NavigateTo("/view/" + id);
    }

    private async Task Search(){
        Tag = "";
        stateService.SetTag(Tag);
        CurrentPage = 1;
        Query = QueryString;
        stateService.SetPage(CurrentPage);
        stateService.SetQuery(Query);
        stateService.SetScrollPos(0);
        await LoadPage(CurrentPage);
    }

     private async Task FilterByTag(string tag){
        Tag = tag;
        stateService.SetTag(Tag);
        Query = "";
        QueryString ="";
        stateService.SetQuery(Query);
        CurrentPage = 1;
        stateService.SetPage(CurrentPage); 
        await LoadPage(CurrentPage);
    }
    private async Task Cancel(){
        QueryString = "";
    }

    private static string GetMatchedSnippet(string FullText, string Query)
    {
        const int maxLength = 10;
        string Text = "";
        string result = "";
        foreach(var q in Query.Split(' '))
        {
            Text = FullText;
            int index = Text.IndexOf(q);   //index 
            int count = 0;
            while (index != -1 && count < 5) {
                int startIndex = 0;
                startIndex = (index - maxLength) < 0 ? 0 : index - maxLength;
                result += Text.Substring(startIndex, maxLength) + "<span style='color:red'>" + q +  "</span>" + Text.Substring(index + q.Length, maxLength) + " ... "; // return match
                count++;
                Text = Text.Substring(index + q.Length);
                index = Text.IndexOf(q);
            }
        }
        if (string.IsNullOrEmpty(result)){
            if(FullText.Length > 100){
                return FullText.Substring(0,100) + "...";
            }else{
                return FullText;                              
            }
        } else{
            return result;
        }
    }

     public void Dispose()
    {
        stateService.OnFilterByTag -= OnFilterByTag;
        //stateService.OnReloadList -= OnReloadList;
    }
}
