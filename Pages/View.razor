@page "/view/{id:int}"
@inject DatabaseContext DbContext
@inject NavigationManager NavigationManager
@attribute [Authorize(Policy = "IsAdmin")]
@using System.Text.RegularExpressions

<PageTitle>筆記本:@Quote.Title</PageTitle>
<HeadContent>
<meta property="og:title" content='@Quote.Title' />
<meta property="og:description" content="" />
<meta property="og:image" content="" />
<meta property="og:type" content="website" />
<meta property="og:url" content="@(NavigationManager.BaseUri)good-content" />
<meta property="og:site_name" content="筆記本" />
</HeadContent>

<a class="btn btn-primary" href="/list">&lt;</a>
<button type="button" style="float:right" class="btn btn-primary mx-2" @onclick=@Edit>修改</button>
<button type="button" style="float:right" class="btn btn-primary" @onclick=@Delete>刪除</button>

<h3 class="mt-4">@Quote.Title</h3>
<span>@( Quote.Created.ToString("dd/MM/yy h:mm tt"))</span> 

@if(!string.IsNullOrEmpty(Quote.Tags)){
    @foreach (var t in Quote.Tags.Split(",")){
        <span class="badge mx-1">@t</span>
    }
}

<span class="badge bg-light text-dark">@(Quote.Private? "保密":"")</span>
<p>@( (MarkupString)ConvertTextUrlToLink(Quote.Source))</p>
<hr>
@* <p style="white-space: pre-wrap;"> @((MarkupString) Preview) </p> *@
<p> @((MarkupString) Quote.Text) </p>
<p>@Quote.Note</p>

@code{

    private Quote Quote {get;set;} = new Quote();
    [Parameter]
    public int Id {get;set;}
    //public string Preview => Markdown.ToHtml(Quote.Text, new MarkdownPipelineBuilder().UseAdvancedExtensions().Build());

    protected override async Task OnInitializedAsync()
    {
        Quote = await DbContext.Quotes.FindAsync(Id); 
    }

    private void Edit()
    {
        NavigationManager.NavigateTo("/edit/" + Id);
    }

    private async Task Delete()
    {
        DbContext.Quotes.Remove(Quote);
        await DbContext.SaveChangesAsync();
        NavigationManager.NavigateTo("/list");
    }

    private static string ConvertTextUrlToLink(string url)  
    {  
    string regex = @"((www\.|(http|https|ftp|news|file)+\:\/\/)[_.a-z0-9-]+\.[a-z0-9\/_:@=.+?,##%&~-]*[^.|\'|\# |!|\(|?|,| |>|<|;|\)])";  
    Regex r = new Regex(regex, RegexOptions.IgnoreCase);  
    return r.Replace(url, "<a href=\"$1\">$1</a>").Replace("href=\"www", "href=\"http://www");  
    }  

}